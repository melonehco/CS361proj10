/*
 * File: ParserTestAbulhabFengMaoSavillo.btm
 * F18 CS361 Project 10
 * Names: Melody Mao, Zena Abulhab, Yi Feng, Evan Savillo
 * Date: 12/7/2018
 * Test file for parser with all Bantam syntax rules
 * We are aware that it would make more sense for individual professors
 * to be instances of the Professor class instead of subclasses, but
 * this setup seemed more amusing.
 */

class Professor
{
	String[] classes;
	
	String getClass(int i)
	{
		return this.classes[i];
	}
}

class Dale extends Professor
{
	void shiverWithJoy()
	{
		{
		
		}
		
		return;
	}
	
	int shudderWithRevulsion()
	{
		return 42 + 42 - 42;
	}
	
	String refactor(String oldCode)
	{
		var elegant = false;
		var newCode = "";
		
		shudderWithRevulsion();
		
		while (!elegant)
		{
			newCode = oldCode + "improvements";
		}
		
		return newCode;
	}
}

class Bruce extends Professor
{
	int numAlpacas = 15;
	int numLlamas = 1;
	int numBurros = 2;
	int numTurkeys = 1;
	
	String[] fixSegFaults()
	{
		var solutions = new String[numLlamas + numTurkeys];
		var i = 0;
		var j = 0;
		var k = 0;
		
		super.classes = new String[5];
		
		for (i = 0; i < 7; i++)
		{
			super.classes[i] = "more CS";
			solutions[i] = "stack overflow";
		}
		
		for (; i <= 14; i++)
		{
			for (j = 0;; j--)
			{
				if (j > -7)
					break;
				
				for (k = 0; k >= 7;)
				{
					k--;
				}
			}
		}
		
		return solutions;
	}
	
	String shear()
	{
		var tooCold = false;
		if (this.numAlpacas == 15 && !tooCold)
		{
			this.numTurkeys = this.numTurkeys * 3 / 2  + (this.numBurros % 1);
			return "snip snip";
		}
		else
		{
			return "wait wait";
		}
	}
	
	Professor hire()
	{
		return new Professor();
	}
}

class Stephanie extends Professor
{
	String sendProjectFeedback(String studentName, int grade)
	{
		if (studentName.contains("z") || (true && 0 == 15 / 5 - 3))
		{
			var sameName = cast(String, studentName);
			print(sameName, grade);
			--grade;
		}
		else
		{
			++--++grade;
		}
		
		studentName.toLowerCase().substring(0, 5).charAt();
		
		return "Well done!";
	}
}

class Ying extends Professor
{
	boolean onSabbatical = true;
}

class Zadia extends Professor
{
	
}